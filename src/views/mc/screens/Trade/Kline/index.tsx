/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */
// @ts-nocheck

import _ from 'lodash';
import React from 'react';
import { View, Text, SafeAreaView} from 'react-native';
import MyTouchableOpacity from '@core/templates/components/MyTouchableOpacity';
import {useSelector} from 'react-redux';
import { useRoute } from '@react-navigation/native';
import ByronKlineChart from 'react-native-kline';
import {dispatchByronKline, KLineIndicator} from 'react-native-kline';
import usePublicState from '@core/hooks/usePublicState';
import Icon from '@icon/index';
import {IStore} from '@schemas/redux-store';
import axios from 'axios';
import { LS as styles, GS } from './style';

export default () => {

  const route = useRoute<any>();
  const { navigation } = usePublicState();
  const [list, setList] = React.useState([]);
  const [viewHeight, setViewHeight] = React.useState(0);
  const instant = useSelector((state: IStore) => state.quotes.instant);
  const symbols = useSelector((state: IStore) => state.quotes.symbols);
  const [currentSymbol, setCurrentSymbol] = React.useState(SYMBOLS_MAPPING[route.params?.symbol]);
  const [currentTimeFrame, setCurrentTimeFrame] = React.useState('M1');
  const [currentChildIndicator, setCurrentChildIndicator] = React.useState(KLineIndicator.ChildKDJ);

  React.useEffect(() => {
    initKlineChart();
  }, [])

  const onLayout = (event: any) => {
    const { height } = event.nativeEvent.layout;
    setViewHeight(height)
  };

  const onMoreKLineData = async () => {}

  const initKlineChart = async () => {
    const res = await axios
      .get(
        'https://www.okex.com/priapi/v5/market/candles?instId=BTC-USDT&bar=1m&limit=1000',
      )
      .catch((err) => {
        console.log(err);
        return;
      });
    if (!res || !res.data || !res.data.data || !res.data.data.length) {
      return;
    }
    const list = [];
    for (let i = 0; i < res.data.data.length; i++) {
      const item = res.data.data[i];
      // 返回值分别为[timestamp,open,high,low,close,volume]
      list.push({
        amount: 0,
        open: Number(item[1]),
        close: Number(item[4]),
        high: Number(item[2]),
        id: parseInt(Number(item[0]) / 1000),
        low: Number(item[3]),
        vol: Number(item[5]),
      });
    }
    list.sort((l, r) => (l.id > r.id ? 1 : -1));
    setList(list);
    subscribeKLine();
  }

  const subscribeKLine = () => {
    const ws = new WebSocket('wss://wspri.okex.com:8443/ws/v5/public');
    ws.onopen = () => {
      ws.send(
        JSON.stringify({
          op: 'subscribe',
          args: [{channel: 'candle1m', instId: 'BTC-USDT'}],
        }),
      );
    };
    ws.onmessage = (ev) => {
      try {
        const data = JSON.parse(ev.data);
        const item = data.data[0];
        dispatchByronKline('update', [
          {
            amount: 0,
            open: Number(item[1]),
            close: Number(item[4]),
            high: Number(item[2]),
            id: parseInt(Number(item[0]) / 1000),
            low: Number(item[3]),
            vol: Number(item[5]),
          },
        ]);
      } catch (err) {}
    };
  }

  const symbolPrice = _.find(instant, {Symbol: currentSymbol});
  const symbolSummary = _.find(symbols, {Key: currentSymbol});

  return (
    <View style={styles.container}>
      <SafeAreaView style={styles.safeView}>
        <View style={styles.header}>
          <Icon.Font name='arrow-left' type={Icon.T.FontAwesome5} onPress={() => navigation.goBack()} style={styles.arrowBack} size={GS.mixin.rem(16)} />
          <View style={styles.headerTitleViwe}>
            <Text style={styles.headerTitleViewText}>{currentSymbol}</Text>
          </View>
        </View>
        <View style={styles.infos}>
          <View style={styles.priceNow}>
            <Text style={{...styles.itemTextPrice, color: INSTANT_QUOTES_STATUS_COLOR[symbolPrice?.askStatus]}}>{Number(symbolPrice?.Ask)?.toFixed(2) || '0000.00'}</Text>
            <View style={styles.itemTextPriceUnit}>
              <Text style={{...styles.itemTextPriceUnitText, color: INSTANT_QUOTES_STATUS_COLOR[symbolPrice?.askStatus]}}>
                {Number(symbolPrice?.changeValue)?.toFixed(3) || '0.000'}
              </Text>
              <Text style={{...styles.itemTextPriceUnitText, color: INSTANT_QUOTES_STATUS_COLOR[symbolPrice?.askStatus]}}>
                {symbolPrice?.changePercent ? `${Number(symbolPrice?.changePercent)?.toFixed(2)}%` : '0.00%'}
              </Text>
            </View>
          </View>
          <View style={styles.priceYestoday}>
            <View style={styles.priceYestodayItem}>
              <Text style={styles.priceYestodayItemText}>开盘 {symbolSummary.Open.toFixed(2)}</Text>
              <Text style={styles.priceYestodayItemText}>最高 {symbolSummary.High.toFixed(2)}</Text>
            </View>
            <View style={styles.priceYestodayItem}>
              <Text style={styles.priceYestodayItemText}>昨收 {symbolSummary.Close.toFixed(2)}</Text>
              <Text style={styles.priceYestodayItemText}>最低 {symbolSummary.Low.toFixed(2)}</Text>
            </View>
          </View>
        </View>
        <View style={styles.timeFrame}>
          {
            TIMEFRAME_LIST.map((item, index) => (
              <MyTouchableOpacity
                key={index}
                style={[styles.timeFrameItem, currentTimeFrame === item.value && styles.timeFrameActive]}
                onPress={() => setCurrentTimeFrame(item.value)}
              >
                <Text style={[styles.timeFrameItemText, currentTimeFrame === item.value && styles.timeFrameItemTextActive]}>{item.label}</Text>
              </MyTouchableOpacity>
            ))
          }
        </View>
        <View onLayout={onLayout} style={{flex: 1}}>
          <ByronKlineChart
            key={viewHeight}
            style={{height: viewHeight}}
            datas={list}
            onMoreKLineData={onMoreKLineData}
            indicators={[KLineIndicator.MainMA, currentChildIndicator]}
            mainBackgroundColor={'#0f1826'}
          />
        </View>
        <View style={styles.timeFrame}>
          {
            KLineIndicatorList.map((item, index) => (
              <MyTouchableOpacity
                key={index}
                style={[styles.timeFrameItem, currentChildIndicator === item.value && styles.timeFrameActive]}
                onPress={() => setCurrentChildIndicator(item.value)}
              >
                <Text style={[styles.timeFrameItemText, currentChildIndicator === item.value && styles.timeFrameItemTextActive]}>{item.label}</Text>
              </MyTouchableOpacity>
            ))
          }
        </View>
        <View style={styles.footer}>
          <View style={styles.actionBtn}>
            <Text style={styles.actionBtnText}>买入</Text>
          </View>
          <View style={{...styles.actionBtn, backgroundColor: '#d44b66'}}>
            <Text style={styles.actionBtnText}>卖出</Text>
          </View>
        </View>
      </SafeAreaView>
    </View>
  );
}


const INSTANT_QUOTES_STATUS_COLOR = {
  UP: '#da485e',
  DOWN: '#05ad90',
  FLAT: '#da485e',
}

// symbols 映射关系
const SYMBOLS_MAPPING = {
  'XAUUSDpro': 'XAUUSD',
  'XAGUSDpro': 'XAGUSD',
  'XAUUSD': 'XAUUSD',
  'XAGUSD': 'XAGUSD',
}

// 时分选择
const TIMEFRAME_LIST = [
  {value: 'M1', label: '分时'},
  {value: 'M5', label: '5分'},
  {value: 'M30', label: '30分'},
  {value: 'H1', label: '1小时'},
  {value: 'H4', label: '4小时'},
  {value: 'D1', label: '日K'},
  {value: 'W1', label: '周K'},
]

// 子图指标
const KLineIndicatorList = [
  {value: KLineIndicator.ChildKDJ, label: 'MA'},
  {value: KLineIndicator.ChildMACD, label: 'MACD'},
  {value: KLineIndicator.ChildRSI, label: 'RSI'},
  {value: KLineIndicator.ChildWR, label: 'WR'},
  {value: KLineIndicator.ChildNONE, label: 'NONE'},
]


